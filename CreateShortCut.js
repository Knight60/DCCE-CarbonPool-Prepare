// --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Library ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');
const { google } = require('googleapis');
const XLSX = require('xlsx');
const pLimit = require('p-limit').default; // << FIX: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ import
const retry = require('async-retry');

// --- CONFIGURATION ---
const CONFIG = {
    EXCEL_FILE_PATH: './DCCE2025-AiTaxonomy-Sp.xlsx',
    SHEET_NAME: 'AiTaxonomy-2025',
    FILE_ID_COLUMN: 'File ID',
    FOLDER_ID_COLUMN: 'Folder ID',
    FILE_NAME_COLUMN: 'File Name'
};

// --- GOOGLE API SETUP ---
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const CREDENTIALS_PATH = path.join(__dirname, 'DCCE-CarbonPool-Credential.json');
const TOKEN_PATH = path.join(__dirname, 'DCCE-CarbonPool-Token.json');

// --- SCRIPT START ---
main();

async function main() {
    try {
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡∏±‡∏ö Google...');
        const credentials = JSON.parse(await fs.readFile(CREDENTIALS_PATH));
        const auth = await authorize(credentials);
        console.log('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        await processShortcutsWithLimitAndRetry(auth);
    } catch (err) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:', err.message);
    }
}

// ==============================================================================
//  ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (Authentication)
// ==============================================================================
async function authorize(credentials) {
    const { client_secret, client_id, redirect_uris } = credentials.installed;
    const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);
    try {
        const token = await fs.readFile(TOKEN_PATH);
        oAuth2Client.setCredentials(JSON.parse(token));
        return oAuth2Client;
    } catch (err) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Token, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÉ‡∏´‡∏°‡πà...');
        return await getNewToken(oAuth2Client);
    }
}

function getNewToken(oAuth2Client) {
    return new Promise((resolve, reject) => {
        const authUrl = oAuth2Client.generateAuthUrl({ access_type: 'offline', scope: SCOPES });
        console.log('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà URL ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:', authUrl);
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        rl.question('‡∏ô‡∏≥‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: ', (code) => {
            rl.close();
            oAuth2Client.getToken(code, (err, token) => {
                if (err) return reject(new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Access Token', err));
                oAuth2Client.setCredentials(token);
                fs.writeFile(TOKEN_PATH, JSON.stringify(token));
                console.log('Token ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà', TOKEN_PATH);
                resolve(oAuth2Client);
            });
        });
    });
}

// ==============================================================================
//  ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Core Logic)
// ==============================================================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏•‡πÑ‡∏Å Retry ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
async function createSingleShortcutWithRetry(drive, fileId, folderId, fileName, rowIndexForLog) {
    return retry(
        async () => {
            const shortcutMetadata = {
                name: fileName,
                mimeType: 'application/vnd.google-apps.shortcut',
                shortcutDetails: { targetId: fileId },
                parents: [folderId]
            };
            return drive.files.create({
                resource: shortcutMetadata,
                fields: 'id, name'
            });
        }, {
        retries: 5,
        factor: 2,
        minTimeout: 1000,
        onRetry: (error, attempt) => {
            console.warn(`[‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndexForLog}] ‚ö†Ô∏è (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt}) ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á '${fileName}', ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...`);
        }
    }
    );
}

/**
 * ‡∏≠‡πà‡∏≤‡∏ô Excel, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥, ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcuts ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ p-limit ‡πÅ‡∏•‡∏∞ async-retry
 */
async function processShortcutsWithLimitAndRetry(auth) {
    // << FIX: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ auth client ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å request
    google.options({ auth: auth });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á drive client ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á auth ‡∏ã‡πâ‡∏≥
    const drive = google.drive({ version: 'v3' });

    const limit = pLimit(100);

    let successCount = 0;
    let errorCount = 0;
    let missingDataCount = 0;
    let alreadyExistsCount = 0;

    try {
        console.log(`\nüìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: ${CONFIG.EXCEL_FILE_PATH}`);
        const workbook = XLSX.readFile(CONFIG.EXCEL_FILE_PATH);
        const sheet = workbook.Sheets[CONFIG.SHEET_NAME];
        if (!sheet) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet '${CONFIG.SHEET_NAME}'`);

        const data = XLSX.utils.sheet_to_json(sheet);
        console.log(`üîç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${data.length} ‡πÅ‡∏ñ‡∏ß`);

        const promises = data.map((row, index) => {
            const rowIndexForLog = index + 2;
            const fileId = row[CONFIG.FILE_ID_COLUMN];
            const folderId = row[CONFIG.FOLDER_ID_COLUMN];
            const fileName = row[CONFIG.FILE_NAME_COLUMN];

            if (!fileId || !folderId || !fileName) {
                missingDataCount++;
                return Promise.resolve({ status: 'skipped_missing_data' });
            }

            return limit(async () => {
                try {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥
                    const query = `'${folderId}' in parents and name = '${fileName.replace(/'/g, "\\'")}' and trashed = false`;
                    const existingFiles = await drive.files.list({
                        q: query,
                        fields: 'files(id)',
                        pageSize: 1
                    });

                    if (existingFiles.data.files && existingFiles.data.files.length > 0) {
                        alreadyExistsCount++;
                        return { status: 'skipped_exists' };
                    }

                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á shortcut
                    return createSingleShortcutWithRetry(drive, fileId, folderId, fileName, rowIndexForLog);

                } catch (error) {
                    throw new Error(`[‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndexForLog}] Error during existence check for '${fileName}': ${error.message}`);
                }
            });
        });

        console.log(`\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ${promises.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ${limit.concurrency} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)...`);

        const results = await Promise.allSettled(promises);

        results.forEach((result, index) => {
            if (result.status === 'fulfilled') {
                if (result.value.status !== 'skipped_missing_data' && result.value.status !== 'skipped_exists') {
                    successCount++;
                }
            } else {
                errorCount++;
                const rowIndexForLog = index + 2;
                console.error(`[‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndexForLog}] ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ñ‡∏≤‡∏ß‡∏£: ${result.reason.message}`);
            }
        });

        console.log('\n========================================');
        console.log('‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚ú®');
        console.log(`- ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- ‚è© ‡∏Ç‡πâ‡∏≤‡∏° (‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß): ${alreadyExistsCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö): ${missingDataCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log('========================================');

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô processShortcutsWithLimitAndRetry:', error.message);
    }
}