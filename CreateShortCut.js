const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');
const { google } = require('googleapis');
const XLSX = require('xlsx');

// --- CONFIGURATION ---
const CONFIG = {
    EXCEL_FILE_PATH: './DCCE2025-AiTaxonomy-Sp.xlsx',
    SHEET_NAME: 'AiTaxonomy-2025',
    FILE_ID_COLUMN: 'File ID',
    FOLDER_ID_COLUMN: 'Folder ID'
};

// --- GOOGLE API SETUP ---
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const CREDENTIALS_PATH = path.join(__dirname, 'DCCE-CarbonPool-Credential.json');
const TOKEN_PATH = path.join(__dirname, 'DCCE-CarbonPool-Token.json');

// --- SCRIPT START ---
main();

async function main() {
    try {
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡∏±‡∏ö Google...');
        const credentials = JSON.parse(await fs.readFile(CREDENTIALS_PATH));
        const auth = await authorize(credentials);
        console.log('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        await processShortcutsConcurrently(auth); // <== ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    } catch (err) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:', err.message);
    }
}

// ==============================================================================
// ¬†‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (Authentication) - ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
// ==============================================================================
async function authorize(credentials) {
    const { client_secret, client_id, redirect_uris } = credentials.installed;
    const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);
    try {
        const token = await fs.readFile(TOKEN_PATH);
        oAuth2Client.setCredentials(JSON.parse(token));
        return oAuth2Client;
    } catch (err) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Token, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÉ‡∏´‡∏°‡πà...');
        return await getNewToken(oAuth2Client);
    }
}

function getNewToken(oAuth2Client) {
    return new Promise((resolve, reject) => {
        const authUrl = oAuth2Client.generateAuthUrl({ access_type: 'offline', scope: SCOPES });
        console.log('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà URL ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:', authUrl);
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        rl.question('‡∏ô‡∏≥‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: ', (code) => {
            rl.close();
            oAuth2Client.getToken(code, (err, token) => {
                if (err) return reject(new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Access Token', err));
                oAuth2Client.setCredentials(token);
                fs.writeFile(TOKEN_PATH, JSON.stringify(token));
                console.log('Token ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà', TOKEN_PATH);
                resolve(oAuth2Client);
            });
        });
    });
}


// ==============================================================================
// ¬†‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Core Logic) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Concurrent Requests
// ==============================================================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper)
 * @param {google.drive_v3.Drive} drive The authenticated Drive API client.
 * @param {string} fileId ID ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
 * @param {string} folderId ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 */
async function createSingleShortcut(drive, fileId, folderId) {
    // 1. ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    const fileInfo = await drive.files.get({
        fileId: fileId,
        fields: 'name'
    });
    const originalFileName = fileInfo.data.name;

    // 2. Metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut
    const shortcutMetadata = {
        name: originalFileName,
        mimeType: 'application/vnd.google-apps.shortcut',
        shortcutDetails: {
            targetId: fileId
        },
        parents: [folderId]
    };

    // 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut
    return drive.files.create({
        resource: shortcutMetadata,
        fields: 'id'
    });
}


/**
 * ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Google Drive shortcuts ‡πÅ‡∏ö‡∏ö Concurrent (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°)
 * @param {google.auth.OAuth2} auth An authorized OAuth2 client.
 */
async function processShortcutsConcurrently(auth) {
    const drive = google.drive({ version: 'v3', auth });
    // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á request ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏≠‡∏≤‡∏à‡πÄ‡∏à‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Rate Limit ‡∏Ç‡∏≠‡∏á Google
    // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡πÜ ‡πÄ‡∏ä‡πà‡∏ô 20-50 ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°
    const CHUNK_SIZE = 100;
    let successCount = 0;
    let errorCount = 0;

    try {
        console.log(`\nüìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: ${CONFIG.EXCEL_FILE_PATH}`);
        const workbook = XLSX.readFile(CONFIG.EXCEL_FILE_PATH);
        const sheet = workbook.Sheets[CONFIG.SHEET_NAME];
        if (!sheet) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet '${CONFIG.SHEET_NAME}'`);

        const data = XLSX.utils.sheet_to_json(sheet);
        console.log(`üîç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${data.length} ‡πÅ‡∏ñ‡∏ß`);

        for (let i = 3550; i < data.length; i += CHUNK_SIZE) {
            const chunk = data.slice(i, i + CHUNK_SIZE);
            const currentChunkNum = Math.floor(i / CHUNK_SIZE) + 1;
            const totalChunks = Math.ceil(data.length / CHUNK_SIZE);

            console.log(`\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà ${currentChunkNum} / ${totalChunks} (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${i + 1} ‡∏ñ‡∏∂‡∏á ${i + chunk.length}) ‡∏à‡∏≤‡∏Å ${data.length}`);

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Array ‡∏Ç‡∏≠‡∏á Promises ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô chunk ‡∏ô‡∏µ‡πâ
            const promises = chunk.map((row, index) => {
                const rowIndexForLog = i + index + 2; // +2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô Excel
                const fileId = row[CONFIG.FILE_ID_COLUMN];
                const folderId = row[CONFIG.FOLDER_ID_COLUMN];

                if (!fileId || !folderId) {
                    console.warn(`[‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndexForLog}] ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏Ç‡πâ‡∏≤‡∏°...`);
                    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Promise ‡∏ó‡∏µ‡πà reject ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô error
                    return Promise.reject(new Error(`Missing File ID or Folder ID at row ${rowIndexForLog}`));
                }

                return createSingleShortcut(drive, fileId, folderId);
            });

            // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Promises ‡πÉ‡∏ô chunk ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
            const results = await Promise.allSettled(promises);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            results.forEach((result, index) => {
                const rowIndexForLog = i + index + 2;
                if (result.status === 'fulfilled') {
                    successCount++;
                    // console.log(`[‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndexForLog}] ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
                } else {
                    errorCount++;
                    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                    if (result.reason.message.includes('Missing') === false) {
                        console.error(`[‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndexForLog}] ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${result.reason.message}`);
                    }
                }
            });
            console.log(`üëç ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà ${currentChunkNum} ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${results.filter(r => r.status === 'fulfilled').length}, ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${results.filter(r => r.status === 'rejected').length})`);
        }

        console.log('\n========================================');
        console.log('‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚ú®');
        console.log(`- ‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î/‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ: ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log('========================================');

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô processShortcutsConcurrently:', error.message);
    }
}