const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');
const { google } = require('googleapis');
const XLSX = require('xlsx');

// --- CONFIGURATION ---
const CONFIG = {
    EXCEL_FILE_PATH: './DCCE2025-AiTaxonomy-Sp.xlsx',
    SHEET_NAME: 'AiTaxonomy-2025',
    FILE_ID_COLUMN: 'File ID',
    FOLDER_ID_COLUMN: 'Folder ID',
    FAILED_ITEMS_OUTPUT_FILE: 'failed_shortcuts_summary.xlsx',
    MAX_RETRIES: 3, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    RETRY_DELAY_MS: 1000 // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠ (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
};

// --- GOOGLE API SETUP ---
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const CREDENTIALS_PATH = path.join(__dirname, 'DCCE-CarbonPool-Credential.json');
const TOKEN_PATH = path.join(__dirname, 'DCCE-CarbonPool-Token.json');

// --- SCRIPT START ---
main();

async function main() {
    try {
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡∏±‡∏ö Google...');
        const credentials = JSON.parse(await fs.readFile(CREDENTIALS_PATH));
        const auth = await authorize(credentials);
        console.log('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        await processShortcutsConcurrently(auth);
    } catch (err) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:', err.message);
    }
}

// ==============================================================================
//  ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (Authentication) - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
// ==============================================================================
async function authorize(credentials) {
    const { client_secret, client_id, redirect_uris } = credentials.installed;
    const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);
    try {
        const token = await fs.readFile(TOKEN_PATH);
        oAuth2Client.setCredentials(JSON.parse(token));
        return oAuth2Client;
    } catch (err) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Token, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÉ‡∏´‡∏°‡πà...');
        return await getNewToken(oAuth2Client);
    }
}

function getNewToken(oAuth2Client) {
    return new Promise((resolve, reject) => {
        const authUrl = oAuth2Client.generateAuthUrl({ access_type: 'offline', scope: SCOPES });
        console.log('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà URL ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:', authUrl);
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        rl.question('‡∏ô‡∏≥‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: ', (code) => {
            rl.close();
            oAuth2Client.getToken(code, (err, token) => {
                if (err) return reject(new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Access Token', err));
                oAuth2Client.setCredentials(token);
                fs.writeFile(TOKEN_PATH, JSON.stringify(token));
                console.log('Token ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà', TOKEN_PATH);
                resolve(oAuth2Client);
            });
        });
    });
}


// ==============================================================================
//  ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Core Logic)
// ==============================================================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (*** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß ***)
 */
async function createSingleShortcut(drive, fileId, folderId) {
    let originalFileName = 'N/A (Failed to fetch name)';
    try {
        // 1. ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏° supportsAllDrives)
        const fileInfo = await drive.files.get({
            fileId: fileId,
            fields: 'name',
            supportsAllDrives: true // <== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        });
        originalFileName = fileInfo.data.name;

        // 2. Metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut
        const shortcutMetadata = {
            name: originalFileName,
            mimeType: 'application/vnd.google-apps.shortcut',
            shortcutDetails: { targetId: fileId },
            parents: [folderId]
        };

        // 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut (‡πÄ‡∏û‡∏¥‡πà‡∏° supportsAllDrives)
        return await drive.files.create({
            resource: shortcutMetadata,
            fields: 'id',
            supportsAllDrives: true // <== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        });
    } catch (error) {
        const enhancedError = new Error(error.message);
        enhancedError.fileName = originalFileName;
        enhancedError.fileId = fileId;
        throw enhancedError;
    }
}

/**
 * ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry Logic
 */
async function createShortcutWithRetries(drive, fileId, folderId, rowIndex) {
    for (let attempt = 1; attempt <= CONFIG.MAX_RETRIES; attempt++) {
        try {
            return await createSingleShortcut(drive, fileId, folderId);
        } catch (error) {
            console.warn(`[‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndex}] ‚ö†Ô∏è ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt}/${CONFIG.MAX_RETRIES} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
            if (attempt === CONFIG.MAX_RETRIES) {
                console.error(`[‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndex}] ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ñ‡∏≤‡∏ß‡∏£‡∏´‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö ${CONFIG.MAX_RETRIES} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
                throw error;
            }
            await new Promise(resolve => setTimeout(resolve, CONFIG.RETRY_DELAY_MS));
        }
    }
}


/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
 */
async function saveFailedItemsToFile(items) {
    if (items.length === 0) {
        console.log('üéâ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ');
        return;
    }
    const filePath = path.join(__dirname, CONFIG.FAILED_ITEMS_OUTPUT_FILE);
    try {
        console.log(`\nüíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß...`);
        const worksheet = XLSX.utils.json_to_sheet(items);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'FailedItems');
        XLSX.writeFile(workbook, filePath);
        console.log(`‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: ${filePath}`);
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ:', error.message);
    }
}


/**
 * ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Google Drive shortcuts
 */
async function processShortcutsConcurrently(auth) {
    const drive = google.drive({ version: 'v3', auth });
    const CHUNK_SIZE = 100;
    let successCount = 0;
    const failedItems = [];

    try {
        console.log(`\nüìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: ${CONFIG.EXCEL_FILE_PATH}`);
        const workbook = XLSX.readFile(CONFIG.EXCEL_FILE_PATH);
        const sheet = workbook.Sheets[CONFIG.SHEET_NAME];
        if (!sheet) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet '${CONFIG.SHEET_NAME}'`);

        const data = XLSX.utils.sheet_to_json(sheet);
        console.log(`üîç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${data.length} ‡πÅ‡∏ñ‡∏ß`);

        for (let i = 3550; i < data.length; i += CHUNK_SIZE) {
            const chunk = data.slice(i, i + CHUNK_SIZE);
            const currentChunkNum = Math.floor(i / CHUNK_SIZE) + 1;
            const totalChunks = Math.ceil((data.length - 3550) / CHUNK_SIZE);

            console.log(`\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà ${currentChunkNum} / ${totalChunks} (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${i + 2} ‡∏ñ‡∏∂‡∏á ${i + 1 + chunk.length})`);

            const promises = chunk.map((row, index) => {
                const rowIndexForLog = i + index + 2;
                const fileId = row[CONFIG.FILE_ID_COLUMN];
                const folderId = row[CONFIG.FOLDER_ID_COLUMN];

                if (!fileId || !folderId) {
                    const reason = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• File ID ‡∏´‡∏£‡∏∑‡∏≠ Folder ID ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö`;
                    return Promise.reject({
                        message: reason,
                        fileName: 'N/A (Missing data)',
                        fileId: fileId || 'N/A',
                        rowIndex: rowIndexForLog
                    });
                }

                return createShortcutWithRetries(drive, fileId, folderId, rowIndexForLog);
            });

            const results = await Promise.allSettled(promises);

            results.forEach((result, index) => {
                const rowIndexForLog = i + index + 2;
                const row = chunk[index];
                if (result.status === 'fulfilled') {
                    successCount++;
                } else {
                    const reason = result.reason;
                    failedItems.push({
                        'File Name': reason.fileName || 'N/A',
                        'File ID': reason.fileId || row[CONFIG.FILE_ID_COLUMN] || 'N/A',
                        'Row in Excel': rowIndexForLog,
                        'Error Message': reason.message
                    });
                }
            });
            const chunkSuccess = results.filter(r => r.status === 'fulfilled').length;
            const chunkFailed = results.filter(r => r.status === 'rejected').length;
            console.log(`üëç ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà ${currentChunkNum} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${chunkSuccess}, ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${chunkFailed})`);
        }

        console.log('\n========================================');
        console.log('‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚ú®');
        console.log(`- ‡∏™‡∏£‡πâ‡∏≤‡∏á Shortcut ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î/‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ: ${failedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log('========================================');

        await saveFailedItemsToFile(failedItems);

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô processShortcutsConcurrently:', error.message);
        await saveFailedItemsToFile(failedItems);
    }
}